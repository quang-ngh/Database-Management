USE TMP
GO

DROP DATABASE RESORTDB;
GO

CREATE DATABASE RESORTDB;
GO

USE RESORTDB;
GO

CREATE TABLE BRANCH 
(
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
	BID AS CONCAT('CN', CAST(ID AS VARCHAR(3))) PERSISTED UNIQUE,									-- INDEX TRONG MA CHI NHANH
	PROVINCE NVARCHAR(255) DEFAULT '' NOT NULL ,						-- TINH THANH 
	ADDR NVARCHAR(255) DEFAULT '' NOT NULL ,							-- DIA CHI
	PHONENUM VARCHAR(255) DEFAULT '' UNIQUE NOT NULL ,						-- DIEN THOAI
	EMAIL VARCHAR(255) DEFAULT '' NOT NULL							-- EMAIL
);

CREATE TABLE BRANCH_PIC
(
	BRANCH_BID INT NOT NULL,										-- MA CHI NHANH -> THAM CHIEU -> BRANCH(ID)
	LINK VARCHAR(255) DEFAULT '' NOT NULL ,										-- LINK DAN DEN HINH ANH
	PRIMARY KEY(BRANCH_BID, LINK),				
	FOREIGN KEY(BRANCH_BID) REFERENCES BRANCH(ID) ON DELETE CASCADE
);

CREATE TABLE ZONEE
(
	ZONE_BID INT NOT NULL,										-- MA CHI NHANH (BID)
	ZNAME NVARCHAR(255) NOT NULL,									-- TEN KHU (NAME)
	PRIMARY KEY(ZONE_BID, ZNAME),				
	FOREIGN KEY(ZONE_BID) REFERENCES BRANCH(ID)  ON UPDATE CASCADE ON DELETE CASCADE
);

--
CREATE TABLE ROOMTYPE
(
	TID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,									-- MA LOAI PHONG
	TYPENAME NVARCHAR(255) NOT NULL,											-- TEN LOAI PHONG
	[AREA (m2)] FLOAT CHECK ([AREA (m2)] > 0) NOT NULL,									-- DIEN TICH
	NUMGUEST INT CHECK(NUMGUEST > 0 AND NUMGUEST < 11) NOT NULL,	--SO NGUOI
	INFOR NVARCHAR(255),											-- THONG TIN THEM
	
);

-- BED INFORMATION --
CREATE TABLE BEDINFO
(
	BED_TID INT NOT NULL,															-- MA LOAI PHONG
	SIZE FLOAT CHECK (SIZE > 0) NOT NULL,											-- KICH THUOC
	CAPACITY INT DEFAULT 1 NOT NULL CHECK(CAPACITY > 0 AND CAPACITY < 11) ,			-- SO NNGUOI	
	PRIMARY KEY(BED_TID, SIZE),
	FOREIGN KEY(BED_TID) REFERENCES ROOMTYPE(TID)  ON DELETE CASCADE
);

-- BRANCH HAVE SOME ROOM TYPE --
CREATE TABLE BRANCH_HAVE_ROOMTYPE
(
	BHR_BID INT NOT NULL,										-- MA CHI NHANH
	BHR_TID INT NOT NULL,												-- MA LOAI PHONG
	[COST (kVND)] INT CHECK ([COST (kVND)] > 0) NOT NULL,								-- GIA TIEN
	PRIMARY KEY(BHR_BID, BHR_TID),
	FOREIGN KEY(BHR_BID) REFERENCES BRANCH(ID)  ON DELETE CASCADE,
	FOREIGN KEY(BHR_TID) REFERENCES ROOMTYPE(TID)  ON DELETE CASCADE
);

-- PHONG TALBE --
CREATE TABLE ROOM
(

	ROOM_BID INT NOT NULL,												-- MA CHI NHANH
	ROOMID VARCHAR(3) NOT NULL,											-- SO PHONG
	ROOM_TID INT NOT NULL,												-- MA LOAI PHONG
	ROOM_ZNAME NVARCHAR(255) NOT NULL,									-- TEN PHONG
	PRIMARY KEY(ROOM_BID, ROOMID),
	FOREIGN KEY(ROOM_TID) REFERENCES ROOMTYPE(TID) ON UPDATE CASCADE,
	FOREIGN KEY(ROOM_BID) REFERENCES BRANCH(ID) ON UPDATE CASCADE, 
	FOREIGN KEY(ROOM_BID, ROOM_ZNAME) REFERENCES ZONEE(ZONE_BID, ZNAME) ON DELETE CASCADE
);

-- LOAI VAT TU --
CREATE TABLE SUPPLY_TYPE 
(
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,											-- MA LOAI VAT TU
	SUPPLY_TYPE_ID AS 'VT' + RIGHT('000' + CAST(ID AS VARCHAR(4)), 4) PERSISTED UNIQUE,					-- FORMAT MA LOAI VAT TU
	SUPPLY_TYPE_NAME NVARCHAR(255) NOT NULL,											-- TEN VAT TU
);

-- LOAI VAT TU CO TRONG PHONG --
CREATE TABLE SUPPLY_IN_ROOM
(
	SIR_SUPPLYID INT NOT NULL,															-- MA LOAI VAT TU
	SIR_TID INT NOT NULL,																-- MA LOAI PHONG
	NUM_SUPPLY INT DEFAULT 1 NOT NULL CHECK (NUM_SUPPLY > 0 AND NUM_SUPPLY < 21)  , 	-- SO LUONG
	PRIMARY KEY(SIR_SUPPLYID, SIR_TID),
	FOREIGN KEY(SIR_TID) REFERENCES ROOMTYPE(TID) ON DELETE CASCADE,
	FOREIGN KEY(SIR_SUPPLYID) REFERENCES SUPPLY_TYPE(ID) ON DELETE CASCADE

);

-- 10. VAT TU --
CREATE TABLE SUPPLY 
(
	SUPPLY_BID INT NOT NULL,														-- MA CHI NHANH
	SUPPLYID INT NOT NULL,															-- MA LOAI VAT TU
	STT_ID INT IDENTITY(1,1) NOT NULL,												-- STT VAT TU
	SUPPLY_ROOMID VARCHAR(3) NOT NULL,												-- SO PHONG
	STATUSS NVARCHAR(255),															-- TINH TRANG
	PRIMARY KEY(SUPPLY_BID, SUPPLYID, STT_ID),
	FOREIGN KEY(SUPPLY_BID) REFERENCES BRANCH(ID) ON DELETE CASCADE,
	FOREIGN KEY(SUPPLYID) REFERENCES SUPPLY_TYPE(ID)  ON DELETE CASCADE,
	FOREIGN KEY(SUPPLY_BID, SUPPLY_ROOMID) REFERENCES ROOM(ROOM_BID, ROOMID) ON UPDATE CASCADE
);


-- 11. NHA CUNG CAP --
CREATE TABLE SUPPLIER (
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,												
	SUPPLIER_ID AS 'NCC' + RIGHT('000' + CAST(ID AS VARCHAR(4)), 4) PERSISTED UNIQUE,	-- MA NHA CUNG CAP
	SUPPLIER_NAME NVARCHAR(255) NOT NULL,										-- TEN NHA CUNG CAP
	SUPPLIER_EMAIL VARCHAR(255),															-- EMAIL
	SUPPLIER_ADDRES NVARCHAR(255) NOT NULL,												-- DIA CHI
);

-- 12. CUNG CAP VAT TU --
CREATE TABLE PROVIDE_SUPPLY(
	PROVIDE_SUPPLIER_ID INT NOT NULL,														-- MA NHA CUNG CAP
	PROVIDE_SUPPLY_BID INT NOT NULL,													-- MA CHI NHANH
	PROVIDE_SUPPLYID INT NOT NULL,													-- MA LOAI VAT TU
	PRIMARY KEY(PROVIDE_SUPPLYID, PROVIDE_SUPPLY_BID),
	FOREIGN KEY(PROVIDE_SUPPLIER_ID) REFERENCES SUPPLIER(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY(PROVIDE_SUPPLY_BID) REFERENCES BRANCH(ID) ON DELETE CASCADE,
	FOREIGN KEY(PROVIDE_SUPPLYID) REFERENCES SUPPLY_TYPE(ID) ON DELETE CASCADE
);

-- 13. KHACH HANG --
CREATE TABLE CUSTOMER(
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,												-- 6 KI TU
	CID AS 'KH' + RIGHT('00000' + CAST(ID AS VARCHAR(6)), 6),				-- MA KHACH HANG	
	[CMND/CCCD] VARCHAR(20) UNIQUE NOT NULL,			 	 							-- CAN CUOC CONG DAN	
	FULLNAME NVARCHAR(255) NOT NULL,											-- HO TEN
	CUSTOMER_PHONENUMBER VARCHAR(12) UNIQUE NOT NULL,									-- SDT
	CUSTOMER_EMAIL VARCHAR(255) UNIQUE,													-- EMAIL
	USERNAME VARCHAR(255) UNIQUE NOT NULL,										-- TEN DANG NHAP
	SCORE INT DEFAULT 0 CHECK (SCORE >= 0) NOT NULL ,							-- DIEM
	CTYPE INT DEFAULT 1 CHECK (CTYPE > 0) NOT NULL , 							-- LOAI
	PASS VARCHAR(255)
);

-- 14. SERVICE -- 
CREATE TABLE PACKAGE(
	PACKAGE_NAME NVARCHAR(255) UNIQUE NOT NULL,									-- TEN GOI
	NUM_DAYS INT NOT NULL CHECK (NUM_DAYS > 0 AND NUM_DAYS < 101),				-- SO NGAY
	NUM_GUESTS INT NOT NULL CHECK (NUM_GUESTS > 0 AND NUM_GUESTS < 11),			-- SO NGUOI
	[COST (kVND)] INT NOT NULL CHECK([COST (kVND)] > 0),											-- GIA TIEN
	PRIMARY KEY(PACKAGE_NAME)
);

-- 15. BILL --
CREATE TABLE BILL_SERVICE(
	BILL_CID INT NOT NULL,
	BILL_PACKAGE_NAME NVARCHAR(255) NOT NULL,
	DATE_BUY DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL ,
	USED_DATE INT CHECK(USED_DATE > 0 AND USED_DATE < 101),
	START_DAY DATETIME,
	CHECK (START_DAY > DATE_BUY),
	[TOTAL_COST (kVND)] INT DEFAULT 0 NOT NULL CHECK([TOTAL_COST (kVND)] > 0) ,

	FOREIGN KEY(BILL_CID) REFERENCES CUSTOMER(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(BILL_PACKAGE_NAME) REFERENCES PACKAGE(PACKAGE_NAME) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(BILL_CID, BILL_PACKAGE_NAME, START_DAY)
);

-- 16. BOOK TICKET -- 
CREATE TABLE BOOKTICKET(
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
	-- TICKET ID FORMAT
	-- DP[DDMMYYYY][6 KI TU SO NGUYEN TU DONG TANG]	-- RED FLAG
	BOOKING_DATE DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
	TICKET_ID AS 'DP' + CONVERT(CHAR(8), CONVERT(date, BOOKING_DATE), 112) + RIGHT ('00000' + CAST(ID AS VARCHAR(6)), 6),									-- MA DAT PHONG
	DEPART_DATE DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
	LEAVE_DATE DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CHECK (DEPART_DATE >= BOOKING_DATE),
	CHECK (LEAVE_DATE >= DEPART_DATE),
	STATUSS INT DEFAULT 0 NOT NULL,
	[TOTAL_COST (kVND)] INT DEFAULT 0 NOT NULL,
	CID INT NOT NULL,
	PACKAGE_NAME NVARCHAR(255) NOT NULL,
	CAPACITY INT NOT NULL,
	FOREIGN KEY(CID) REFERENCES CUSTOMER(ID) ON DELETE CASCADE,
	FOREIGN KEY(PACKAGE_NAME) REFERENCES PACKAGE(PACKAGE_NAME) ON DELETE CASCADE,
);

-- 17. ROOM_RENT -- 
CREATE TABLE ROOM_RENT(
	ROOM_TICKET_ID INT NOT NULL,
	ROOM_RENT_BID INT NOT NULL,
	ROOM_RENT_ID VARCHAR(3) NOT NULL,
	FOREIGN KEY(ROOM_TICKET_ID) REFERENCES BOOKTICKET(ID),
	FOREIGN KEY(ROOM_RENT_BID, ROOM_RENT_ID) REFERENCES ROOM(ROOM_BID, ROOMID) ON DELETE CASCADE,
	PRIMARY KEY(ROOM_TICKET_ID, ROOM_RENT_BID, ROOM_RENT_ID)
);

-- 18. BILL --
CREATE TABLE BILL
(
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
	-- TICKET ID FORMAT
	-- DP[DDMMYYYY][6 KI TU SO NGUYEN TU DONG TANG]	-- RED FLAG
	BILL_ID AS 'HD' + CONVERT(CHAR(8), CONVERT(date, GETDATE()), 112) + RIGHT ('00000' + CAST(ID AS VARCHAR(6)), 6),			
	START_TIME TIME NOT NULL,
	LEAVE_TIME TIME NOT NULL,
	TICKET_ID INT NOT NULL, 			
	FOREIGN KEY(TICKET_ID) REFERENCES BOOKTICKET(ID) ON DELETE CASCADE,
);

-- 19. COMPANY --
CREATE TABLE COMPANY
(
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
	COMPANY_ID AS 'DN' + RIGHT('000' + CAST(ID AS VARCHAR(4)), 4) PERSISTED UNIQUE,
	COMPANY_NAME NVARCHAR(255),
);

-- 20. SERVICE --
CREATE TABLE SERVICES
(
	ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SERVICE_TYPE CHAR(1) CHECK(SERVICE_TYPE In ('R','S','C','M','B')),
    SERVICE_ID AS 'DV'+ SERVICE_TYPE + RIGHT('00' + CAST(ID AS VARCHAR(3)), 3) PERSISTED UNIQUE,
	CAPACITY INT NOT NULL,
	STYLE NVARCHAR(255),
	COMPANY_ID INT NOT NULL,
	FOREIGN KEY(COMPANY_ID) REFERENCES COMPANY(ID) ON UPDATE CASCADE ON DELETE CASCADE,
);

-- 21. SPA -- 
CREATE TABLE SPA 
(
	SERVICE_ID VARCHAR(6) NOT NULL,
	SPA_NAME NVARCHAR(255) NOT NULL UNIQUE,
	FOREIGN KEY(SERVICE_ID) REFERENCES  SERVICES(SERVICE_ID) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY(SERVICE_ID, SPA_NAME)
);	

-- 22. SOUVENIR TYPE -- 
CREATE TABLE SOUVENIR
(
	SERVICE_ID VARCHAR(6) NOT NULL,
	SOUVENIR_NAME NVARCHAR(5) NOT NULL UNIQUE,
);

-- 23. SOUVENIR BRAND --
CREATE TABLE SOUVENIR_BRAND
(
	SERVICE_ID VARCHAR(6) NOT NULL,
	BRAND NVARCHAR(255) NOT NULL,
	FOREIGN KEY(SERVICE_ID) REFERENCES SERVICES(SERVICE_ID) ON UPDATE CASCADE ON DELETE CASCADE,
	PRIMARY KEY(SERVICE_ID, BRAND)

);

-- 24. ESTATE -- 
CREATE TABLE ESTATE
(
	BID INT NOT NULL,
	ID INT DEFAULT 1 NOT NULL CHECK (ID > 0 AND ID < 51),
	HEIGHT FLOAT NOT NULL CHECK(HEIGHT > 0), 
	WIDTH FLOAT NOT NULL CHECK(WIDTH > 0),
	COST INT NOT NULL,
	INFO NVARCHAR(255), 
	SERVICE_ID VARCHAR(6) NOT NULL,
	LINK VARCHAR(255) NOT NULL,
	STORENAME NVARCHAR(255) DEFAULT '',
	FOREIGN KEY(SERVICE_ID) REFERENCES SERVICES(SERVICE_ID) ON DELETE CASCADE,
	FOREIGN KEY(BID) REFERENCES BRANCH(ID)  ON DELETE CASCADE,
	PRIMARY KEY(BID, ID)
);

-- 25. STORE_PIC --
CREATE TABLE STORE_PIC
(
	BID INT NOT NULL,
	ID INT NOT NULL CHECK (ID > 0 AND ID < 51),
	LINK VARCHAR(255) NOT NULL,
	FOREIGN KEY(BID, ID) REFERENCES ESTATE(BID, ID) ON DELETE CASCADE,
	PRIMARY KEY(BID, ID, LINK)
);

-- 26. ACTIVE_TIME -- 
CREATE TABLE TIME_ACTIVITY
(
	BID INT NOT NULL,
	ID INT NOT NULL CHECK (ID > 0 AND ID < 51),
	START_TIME TIME NOT NULL,
	END_TIME TIME NOT NULL,
	FOREIGN KEY(BID, ID) REFERENCES ESTATE(BID, ID) ON DELETE CASCADE,
	PRIMARY KEY(BID, ID, START_TIME)
);

SELECT *
FROM SYSOBJECTS
WHERE xtype = 'U'
GO